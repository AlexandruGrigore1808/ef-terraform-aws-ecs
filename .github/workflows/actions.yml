
name: Run Terraform code; Deploy Amazon ECS; Deploy IAM dependencies; Push to ECR

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-central-1                                                          # AWS region
  ECR_REPOSITORY: test_ecr_repository                                               # Amazon ECR repo name
  ECS_SERVICE: test_ecs_service                                                     # Amazon ECS service name
  ECS_CLUSTER: test_ecs_cluster                                                     # Amazon ECS cluster name
  ECS_TASK_DEFINITION: ecs/task_definitions/aws-ecs-example-task-role.json          # path of Amazon ECS task definition if task is not run from Terraform
  CONTAINER_NAME: sample-fargate-app                                                # name of the container in containerDefinitions section of your task


jobs:
  stage-1:
    name: Checkout
    runs-on: ubuntu-latest
    environment: dev
    steps:

    - name: Checkout
      uses: actions/checkout@v3
    
  stage-2:
    name: Authentications
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

  stage-3:
    name: Terraform execution
    runs-on: ubuntu-latest
    environment: dev
    steps: 
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions/init@v0.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      uses: hashicorp/terraform-github-actions/validate@v0.3.7

    - name: Terraform Plan
      run: |
        cd terraform
        sudo rm -Rf .terraform
        terraform init -reconfigure
        terraform plan -var-file=ecs.tfvars
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Terraform Apply
      run: |
        cd terraform
        # terraform apply -auto-approve -var-file=ecs.tfvars
        terraform apply
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  stage-4:
    name: Build image, push it to ECR and deploy it to ECS - these steps should be further splitted.
    runs-on: ubuntu-latest
    environment: dev
    steps: 
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build docker container and push it to ECR so that it can be deployed to ECS.

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1          ####### ECR Repo has to exist before running this step
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
